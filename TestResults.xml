<test-run id="2" duration="2.579623900000001" testcasecount="199" total="199" passed="199" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:48Z" end-time="2024-11-08T15:25:52Z">
  <test-suite type="Assembly" name="CSF.Screenplay.Tests.dll" fullname="C:\projects\csf-screenplay\Tests\CSF.Screenplay.Tests\bin\Debug\net8.0\CSF.Screenplay.Tests.dll" total="199" passed="199" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:52Z" duration="2.5796239">
    <test-suite type="TestSuite" name="CSF" fullname="CSF" total="60" passed="60" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:51Z" duration="0.2352057">
      <test-suite type="TestSuite" name="Screenplay" fullname="CSF.Screenplay" total="60" passed="60" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:51Z" duration="0.2352057">
        <test-suite type="TestFixture" name="ActorExtensionsTests" fullname="CSF.Screenplay.ActorExtensionsTests" classname="CSF.Screenplay.ActorExtensionsTests" total="17" passed="17" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.085871">
          <test-case name="AttemptsToShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.AttemptsToShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" methodname="AttemptsToShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.019289" asserts="0" seed="1895403879" />
          <test-case name="AttemptsToWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.AttemptsToWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" methodname="AttemptsToWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.015563" asserts="0" seed="1568083189" />
          <test-case name="AttemptsToWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.AttemptsToWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" methodname="AttemptsToWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.009373" asserts="0" seed="437461971" />
          <test-case name="GetAbilityGenericShouldReturnTheAbilityIfTheActorHasIt(auto&lt;Actor&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.GetAbilityGenericShouldReturnTheAbilityIfTheActorHasIt(auto&lt;Actor&gt;,auto&lt;String&gt;)" methodname="GetAbilityGenericShouldReturnTheAbilityIfTheActorHasIt(auto&lt;Actor&gt;,auto&lt;String&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002755" asserts="0" seed="456999586" />
          <test-case name="GetAbilityGenericShouldThrowIfTheActorDoesNotHaveAnAbilityOfTheMatchingType(auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.GetAbilityGenericShouldThrowIfTheActorDoesNotHaveAnAbilityOfTheMatchingType(auto&lt;Actor&gt;)" methodname="GetAbilityGenericShouldThrowIfTheActorDoesNotHaveAnAbilityOfTheMatchingType(auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.015542" asserts="0" seed="2117293743" />
          <test-case name="GetAbilityGenericShouldThrowIfTheActorIsOfTheWrongInterface(auto&lt;ICanPerform&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.GetAbilityGenericShouldThrowIfTheActorIsOfTheWrongInterface(auto&lt;ICanPerform&gt;)" methodname="GetAbilityGenericShouldThrowIfTheActorIsOfTheWrongInterface(auto&lt;ICanPerform&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001046" asserts="0" seed="812810450" />
          <test-case name="HasAbilityGenericShouldReturnFalseIfTheActorDoesNotHaveAnAbilityOfTheMatchingType(auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.HasAbilityGenericShouldReturnFalseIfTheActorDoesNotHaveAnAbilityOfTheMatchingType(auto&lt;Actor&gt;)" methodname="HasAbilityGenericShouldReturnFalseIfTheActorDoesNotHaveAnAbilityOfTheMatchingType(auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001594" asserts="0" seed="3724534" />
          <test-case name="HasAbilityGenericShouldReturnTrueIfTheActorHasAnAbilityOfTheMatchingType(auto&lt;Actor&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.HasAbilityGenericShouldReturnTrueIfTheActorHasAnAbilityOfTheMatchingType(auto&lt;Actor&gt;,auto&lt;String&gt;)" methodname="HasAbilityGenericShouldReturnTrueIfTheActorHasAnAbilityOfTheMatchingType(auto&lt;Actor&gt;,auto&lt;String&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000593" asserts="0" seed="662986618" />
          <test-case name="PerformAsyncShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.PerformAsyncShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" methodname="PerformAsyncShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002332" asserts="0" seed="34740849" />
          <test-case name="PerformAsyncWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.PerformAsyncWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" methodname="PerformAsyncWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002807" asserts="0" seed="1318379015" />
          <test-case name="PerformAsyncWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.PerformAsyncWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" methodname="PerformAsyncWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002513" asserts="0" seed="406745243" />
          <test-case name="ShouldShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.ShouldShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" methodname="ShouldShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001832" asserts="0" seed="1428672412" />
          <test-case name="ShouldWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.ShouldWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" methodname="ShouldWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002224" asserts="0" seed="1078843073" />
          <test-case name="ShouldWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.ShouldWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" methodname="ShouldWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002196" asserts="0" seed="580873238" />
          <test-case name="WasAbleToShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.WasAbleToShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" methodname="WasAbleToShouldExecutePerformable(auto&lt;IPerformable&gt;,auto&lt;IGetsPerformable&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002016" asserts="0" seed="941284576" />
          <test-case name="WasAbleToWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.WasAbleToWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" methodname="WasAbleToWithGenericResultShouldExecutePerformable(auto&lt;IPerformableWithResult`1&gt;,auto&lt;IGetsPerformableWithResult`1&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002257" asserts="0" seed="173032613" />
          <test-case name="WasAbleToWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorExtensionsTests.WasAbleToWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" methodname="WasAbleToWithResultShouldExecutePerformable(auto&lt;IPerformableWithResult&gt;,auto&lt;IGetsPerformableWithResult&gt;,auto&lt;Actor&gt;)" classname="ActorExtensionsTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001939" asserts="0" seed="572515495" />
        </test-suite>
        <test-suite type="TestFixture" name="ActorTests" fullname="CSF.Screenplay.ActorTests" classname="CSF.Screenplay.ActorTests" total="23" passed="23" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.0615419">
          <test-case name="DisposeShouldDisposeDisposableAbilities(auto&lt;Mock`1&gt;,auto&lt;Mock`1&gt;,auto&lt;Actor&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.ActorTests.DisposeShouldDisposeDisposableAbilities(auto&lt;Mock`1&gt;,auto&lt;Mock`1&gt;,auto&lt;Actor&gt;,auto&lt;String&gt;)" methodname="DisposeShouldDisposeDisposableAbilities(auto&lt;Mock`1&gt;,auto&lt;Mock`1&gt;,auto&lt;Actor&gt;,auto&lt;String&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.012154" asserts="0" seed="121191253" />
          <test-case name="DisposeShouldNotDisposeTwiceIfCalledTwice(auto&lt;Mock`1&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorTests.DisposeShouldNotDisposeTwiceIfCalledTwice(auto&lt;Mock`1&gt;,auto&lt;Actor&gt;)" methodname="DisposeShouldNotDisposeTwiceIfCalledTwice(auto&lt;Mock`1&gt;,auto&lt;Actor&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000723" asserts="0" seed="1156874424" />
          <test-case name="IsAbleToShouldAddAnAbilityToTheActor(auto&lt;Actor&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.ActorTests.IsAbleToShouldAddAnAbilityToTheActor(auto&lt;Actor&gt;,auto&lt;String&gt;)" methodname="IsAbleToShouldAddAnAbilityToTheActor(auto&lt;Actor&gt;,auto&lt;String&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.00025" asserts="0" seed="622035504" />
          <test-case name="IsAbleToShouldInvokeGainedAbilityEvent(auto&lt;Actor&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.ActorTests.IsAbleToShouldInvokeGainedAbilityEvent(auto&lt;Actor&gt;,auto&lt;String&gt;)" methodname="IsAbleToShouldInvokeGainedAbilityEvent(auto&lt;Actor&gt;,auto&lt;String&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000858" asserts="0" seed="1356373029" />
          <test-case name="IsAbleToShouldNotThrowForAStringAbility(auto&lt;Actor&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.ActorTests.IsAbleToShouldNotThrowForAStringAbility(auto&lt;Actor&gt;,auto&lt;String&gt;)" methodname="IsAbleToShouldNotThrowForAStringAbility(auto&lt;Actor&gt;,auto&lt;String&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000564" asserts="0" seed="904203149" />
          <test-case name="IsAbleToShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.ActorTests.IsAbleToShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;String&gt;)" methodname="IsAbleToShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;String&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001406" asserts="0" seed="398257600" />
          <test-case name="IsAbleToShouldThrowIfTheAbilityIsNull(auto&lt;Actor&gt;)" fullname="CSF.Screenplay.ActorTests.IsAbleToShouldThrowIfTheAbilityIsNull(auto&lt;Actor&gt;)" methodname="IsAbleToShouldThrowIfTheAbilityIsNull(auto&lt;Actor&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001082" asserts="0" seed="1445882096" />
          <test-case name="IsAbleToShouldThrowIfTheSameAbilityTypeIsAddedTwice(auto&lt;Actor&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.ActorTests.IsAbleToShouldThrowIfTheSameAbilityTypeIsAddedTwice(auto&lt;Actor&gt;,auto&lt;String&gt;)" methodname="IsAbleToShouldThrowIfTheSameAbilityTypeIsAddedTwice(auto&lt;Actor&gt;,auto&lt;String&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000714" asserts="0" seed="1799890501" />
          <test-case name="PerformAsyncWithGenericResultShouldExecuteThePerformable(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithGenericResultShouldExecuteThePerformable(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" methodname="PerformAsyncWithGenericResultShouldExecuteThePerformable(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.003907" asserts="0" seed="292216050" />
          <test-case name="PerformAsyncWithGenericResultShouldRaisePerformableFailedEventIfPerformableThrows(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithGenericResultShouldRaisePerformableFailedEventIfPerformableThrows(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" methodname="PerformAsyncWithGenericResultShouldRaisePerformableFailedEventIfPerformableThrows(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.007488" asserts="0" seed="62085486" />
          <test-case name="PerformAsyncWithGenericResultShouldRaiseThreeEvents(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithGenericResultShouldRaiseThreeEvents(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;,auto&lt;String&gt;)" methodname="PerformAsyncWithGenericResultShouldRaiseThreeEvents(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;,auto&lt;String&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.003179" asserts="0" seed="1253054515" />
          <test-case name="PerformAsyncWithGenericResultShouldRethrowTheSameExceptionIfItIsPerformableException(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithGenericResultShouldRethrowTheSameExceptionIfItIsPerformableException(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" methodname="PerformAsyncWithGenericResultShouldRethrowTheSameExceptionIfItIsPerformableException(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.003005" asserts="0" seed="176103077" />
          <test-case name="PerformAsyncWithGenericResultShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithGenericResultShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" methodname="PerformAsyncWithGenericResultShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult`1&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001606" asserts="0" seed="1053267968" />
          <test-case name="PerformAsyncWithNongenericResultShouldExecuteThePerformable(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithNongenericResultShouldExecuteThePerformable(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" methodname="PerformAsyncWithNongenericResultShouldExecuteThePerformable(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002163" asserts="0" seed="891776373" />
          <test-case name="PerformAsyncWithNongenericResultShouldRaisePerformableFailedEventIfPerformableThrows(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithNongenericResultShouldRaisePerformableFailedEventIfPerformableThrows(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" methodname="PerformAsyncWithNongenericResultShouldRaisePerformableFailedEventIfPerformableThrows(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.003571" asserts="0" seed="1751285483" />
          <test-case name="PerformAsyncWithNongenericResultShouldRaiseThreeEvents(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithNongenericResultShouldRaiseThreeEvents(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;,auto&lt;Object&gt;)" methodname="PerformAsyncWithNongenericResultShouldRaiseThreeEvents(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;,auto&lt;Object&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002762" asserts="0" seed="1000034322" />
          <test-case name="PerformAsyncWithNongenericResultShouldRethrowTheSameExceptionIfItIsPerformableException(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithNongenericResultShouldRethrowTheSameExceptionIfItIsPerformableException(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" methodname="PerformAsyncWithNongenericResultShouldRethrowTheSameExceptionIfItIsPerformableException(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002839" asserts="0" seed="1600363004" />
          <test-case name="PerformAsyncWithNongenericResultShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithNongenericResultShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" methodname="PerformAsyncWithNongenericResultShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;IPerformableWithResult&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000907" asserts="0" seed="1920006884" />
          <test-case name="PerformAsyncWithoutResultShouldExecuteThePerformable(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithoutResultShouldExecuteThePerformable(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" methodname="PerformAsyncWithoutResultShouldExecuteThePerformable(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002083" asserts="0" seed="1786066813" />
          <test-case name="PerformAsyncWithoutResultShouldRaisePerformableFailedEventIfPerformableThrows(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithoutResultShouldRaisePerformableFailedEventIfPerformableThrows(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" methodname="PerformAsyncWithoutResultShouldRaisePerformableFailedEventIfPerformableThrows(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.003886" asserts="0" seed="513179153" />
          <test-case name="PerformAsyncWithoutResultShouldRaiseTwoEvents(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithoutResultShouldRaiseTwoEvents(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" methodname="PerformAsyncWithoutResultShouldRaiseTwoEvents(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.0014499" asserts="0" seed="776663056" />
          <test-case name="PerformAsyncWithoutResultShouldRethrowTheSameExceptionIfItIsPerformableException(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithoutResultShouldRethrowTheSameExceptionIfItIsPerformableException(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" methodname="PerformAsyncWithoutResultShouldRethrowTheSameExceptionIfItIsPerformableException(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.00267" asserts="0" seed="2043422152" />
          <test-case name="PerformAsyncWithoutResultShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" fullname="CSF.Screenplay.ActorTests.PerformAsyncWithoutResultShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" methodname="PerformAsyncWithoutResultShouldThrowIfCalledAfterActorIsDisposed(auto&lt;Actor&gt;,auto&lt;IPerformable&gt;)" classname="ActorTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002275" asserts="0" seed="1449302149" />
        </test-suite>
        <test-suite type="TestFixture" name="PerformanceTests" fullname="CSF.Screenplay.PerformanceTests" classname="CSF.Screenplay.PerformanceTests" total="11" passed="11" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.0128929">
          <test-case name="BeginPerformanceShouldInvokePerformanceBegunOnTheEventBus(auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.PerformanceTests.BeginPerformanceShouldInvokePerformanceBegunOnTheEventBus(auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" methodname="BeginPerformanceShouldInvokePerformanceBegunOnTheEventBus(auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" classname="PerformanceTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002321" asserts="0" seed="158734432" />
          <test-case name="BeginPerformanceShouldThrowIfExecutedTwice(auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.PerformanceTests.BeginPerformanceShouldThrowIfExecutedTwice(auto&lt;IServiceProvider&gt;)" methodname="BeginPerformanceShouldThrowIfExecutedTwice(auto&lt;IServiceProvider&gt;)" classname="PerformanceTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000928" asserts="0" seed="1990653829" />
          <test-case name="DisposeShouldUnsubscribeFromAllActors(auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;,auto&lt;Performance&gt;)" fullname="CSF.Screenplay.PerformanceTests.DisposeShouldUnsubscribeFromAllActors(auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;,auto&lt;Performance&gt;)" methodname="DisposeShouldUnsubscribeFromAllActors(auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;,auto&lt;Performance&gt;)" classname="PerformanceTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.0013519" asserts="0" seed="853215170" />
          <test-case name="FinishPerformanceShouldInvokePerformanceFinishedOnTheEventBus(auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;,auto&lt;Nullable`1&gt;)" fullname="CSF.Screenplay.PerformanceTests.FinishPerformanceShouldInvokePerformanceFinishedOnTheEventBus(auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;,auto&lt;Nullable`1&gt;)" methodname="FinishPerformanceShouldInvokePerformanceFinishedOnTheEventBus(auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;,auto&lt;Nullable`1&gt;)" classname="PerformanceTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002984" asserts="0" seed="1099263622" />
          <test-case name="FinishPerformanceShouldThrowIfExecutedBeforeBeginPerformance(auto&lt;IServiceProvider&gt;,auto&lt;Nullable`1&gt;)" fullname="CSF.Screenplay.PerformanceTests.FinishPerformanceShouldThrowIfExecutedBeforeBeginPerformance(auto&lt;IServiceProvider&gt;,auto&lt;Nullable`1&gt;)" methodname="FinishPerformanceShouldThrowIfExecutedBeforeBeginPerformance(auto&lt;IServiceProvider&gt;,auto&lt;Nullable`1&gt;)" classname="PerformanceTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001195" asserts="0" seed="50850333" />
          <test-case name="FinishPerformanceShouldThrowIfExecutedTwice(auto&lt;IServiceProvider&gt;,auto&lt;Nullable`1&gt;)" fullname="CSF.Screenplay.PerformanceTests.FinishPerformanceShouldThrowIfExecutedTwice(auto&lt;IServiceProvider&gt;,auto&lt;Nullable`1&gt;)" methodname="FinishPerformanceShouldThrowIfExecutedTwice(auto&lt;IServiceProvider&gt;,auto&lt;Nullable`1&gt;)" classname="PerformanceTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000778" asserts="0" seed="1066076773" />
          <test-case name="PerformanceStateShouldReturnCompletedIfThePerformanceFinishesWithNoResult(auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.PerformanceTests.PerformanceStateShouldReturnCompletedIfThePerformanceFinishesWithNoResult(auto&lt;IServiceProvider&gt;)" methodname="PerformanceStateShouldReturnCompletedIfThePerformanceFinishesWithNoResult(auto&lt;IServiceProvider&gt;)" classname="PerformanceTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.00165" asserts="0" seed="979962879" />
          <test-case name="PerformanceStateShouldReturnFailedIfThePerformanceFinishesWithFailure(auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.PerformanceTests.PerformanceStateShouldReturnFailedIfThePerformanceFinishesWithFailure(auto&lt;IServiceProvider&gt;)" methodname="PerformanceStateShouldReturnFailedIfThePerformanceFinishesWithFailure(auto&lt;IServiceProvider&gt;)" classname="PerformanceTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000389" asserts="0" seed="1231855777" />
          <test-case name="PerformanceStateShouldReturnInProgressBeforeThePerformanceFinishes(auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.PerformanceTests.PerformanceStateShouldReturnInProgressBeforeThePerformanceFinishes(auto&lt;IServiceProvider&gt;)" methodname="PerformanceStateShouldReturnInProgressBeforeThePerformanceFinishes(auto&lt;IServiceProvider&gt;)" classname="PerformanceTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000364" asserts="0" seed="285165458" />
          <test-case name="PerformanceStateShouldReturnNotStartedBeforeThePerformanceBegins(auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.PerformanceTests.PerformanceStateShouldReturnNotStartedBeforeThePerformanceBegins(auto&lt;IServiceProvider&gt;)" methodname="PerformanceStateShouldReturnNotStartedBeforeThePerformanceBegins(auto&lt;IServiceProvider&gt;)" classname="PerformanceTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000437" asserts="0" seed="21834660" />
          <test-case name="PerformanceStateShouldReturnSuccessIfThePerformanceFinishesWithSuccess(auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.PerformanceTests.PerformanceStateShouldReturnSuccessIfThePerformanceFinishesWithSuccess(auto&lt;IServiceProvider&gt;)" methodname="PerformanceStateShouldReturnSuccessIfThePerformanceFinishesWithSuccess(auto&lt;IServiceProvider&gt;)" classname="PerformanceTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000495" asserts="0" seed="162374893" />
        </test-suite>
        <test-suite type="TestFixture" name="ReportFragmentFormatterTests" fullname="CSF.Screenplay.ReportFragmentFormatterTests" classname="CSF.Screenplay.ReportFragmentFormatterTests" total="1" passed="1" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.012151">
          <test-case name="FormatShouldReturnCorrectReportFragment(auto&lt;IGetsReportFormat&gt;,auto&lt;IGetsValueFormatter&gt;,auto&lt;ReportFragmentFormatter&gt;,auto&lt;IValueFormatter&gt;)" fullname="CSF.Screenplay.ReportFragmentFormatterTests.FormatShouldReturnCorrectReportFragment(auto&lt;IGetsReportFormat&gt;,auto&lt;IGetsValueFormatter&gt;,auto&lt;ReportFragmentFormatter&gt;,auto&lt;IValueFormatter&gt;)" methodname="FormatShouldReturnCorrectReportFragment(auto&lt;IGetsReportFormat&gt;,auto&lt;IGetsValueFormatter&gt;,auto&lt;ReportFragmentFormatter&gt;,auto&lt;IValueFormatter&gt;)" classname="ReportFragmentFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.012151" asserts="0" seed="1394717547" />
        </test-suite>
        <test-suite type="TestFixture" name="ScreenplayExtensionsTests" fullname="CSF.Screenplay.ScreenplayExtensionsTests" classname="CSF.Screenplay.ScreenplayExtensionsTests" total="5" passed="5" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.059701">
          <test-case name="ExecuteAsPerformanceGenericShouldExecuteThePerformanceHostLogic()" fullname="CSF.Screenplay.ScreenplayExtensionsTests.ExecuteAsPerformanceGenericShouldExecuteThePerformanceHostLogic()" methodname="ExecuteAsPerformanceGenericShouldExecuteThePerformanceHostLogic()" classname="ScreenplayExtensionsTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001708" asserts="0" seed="1374367829" />
          <test-case name="ExecuteAsPerformanceShouldExecuteTheLogic(auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.ScreenplayExtensionsTests.ExecuteAsPerformanceShouldExecuteTheLogic(auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceShouldExecuteTheLogic(auto&lt;Screenplay&gt;)" classname="ScreenplayExtensionsTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.003706" asserts="0" seed="88943151" />
          <test-case name="ExecuteAsPerformanceShouldInvokeBeginPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.ScreenplayExtensionsTests.ExecuteAsPerformanceShouldInvokeBeginPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceShouldInvokeBeginPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" classname="ScreenplayExtensionsTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000717" asserts="0" seed="805221411" />
          <test-case name="ExecuteAsPerformanceShouldInvokeFinishPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.ScreenplayExtensionsTests.ExecuteAsPerformanceShouldInvokeFinishPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceShouldInvokeFinishPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" classname="ScreenplayExtensionsTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000654" asserts="0" seed="1636820458" />
          <test-case name="ExecuteAsPerformanceShouldThrowIfTheTaskTakesTooLong(auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.ScreenplayExtensionsTests.ExecuteAsPerformanceShouldThrowIfTheTaskTakesTooLong(auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceShouldThrowIfTheTaskTakesTooLong(auto&lt;Screenplay&gt;)" classname="ScreenplayExtensionsTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.052916" asserts="0" seed="845485358" />
        </test-suite>
        <test-suite type="TestFixture" name="ScreenplayTests" fullname="CSF.Screenplay.ScreenplayTests" classname="CSF.Screenplay.ScreenplayTests" total="3" passed="3" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0030479">
          <test-case name="ExecuteAsPerformanceAsyncShouldExecuteTheLogic(auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.ScreenplayTests.ExecuteAsPerformanceAsyncShouldExecuteTheLogic(auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceAsyncShouldExecuteTheLogic(auto&lt;Screenplay&gt;)" classname="ScreenplayTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000958" asserts="0" seed="1218743076" />
          <test-case name="ExecuteAsPerformanceAsyncShouldInvokeBeginPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.ScreenplayTests.ExecuteAsPerformanceAsyncShouldInvokeBeginPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceAsyncShouldInvokeBeginPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" classname="ScreenplayTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0010839" asserts="0" seed="1365141727" />
          <test-case name="ExecuteAsPerformanceAsyncShouldInvokeFinishPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.ScreenplayTests.ExecuteAsPerformanceAsyncShouldInvokeFinishPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceAsyncShouldInvokeFinishPerformanceOnThePerformable(auto&lt;Screenplay&gt;)" classname="ScreenplayTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001006" asserts="0" seed="170909951" />
        </test-suite>
      </test-suite>
    </test-suite>
    <test-suite type="TestSuite" name="CSF" fullname="CSF" total="139" passed="139" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:52Z" duration="2.3444182">
      <test-suite type="TestSuite" name="Screenplay" fullname="CSF.Screenplay" total="139" passed="139" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:52Z" duration="2.3444182">
        <test-suite type="TestSuite" name="Actors" fullname="CSF.Screenplay.Actors" total="12" passed="12" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.055743">
          <test-suite type="TestFixture" name="CastTests" fullname="CSF.Screenplay.Actors.CastTests" classname="CSF.Screenplay.Actors.CastTests" total="6" passed="6" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.048641">
            <test-case name="GetActorByNameShouldAddActorToEventBus(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.Actors.CastTests.GetActorByNameShouldAddActorToEventBus(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" methodname="GetActorByNameShouldAddActorToEventBus(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" classname="CastTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.022529" asserts="0" seed="412654486" />
            <test-case name="GetActorByNameShouldAddActorToEventBusOnlyOnceEvenIfCalledThreeTimes(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.Actors.CastTests.GetActorByNameShouldAddActorToEventBusOnlyOnceEvenIfCalledThreeTimes(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" methodname="GetActorByNameShouldAddActorToEventBusOnlyOnceEvenIfCalledThreeTimes(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" classname="CastTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001322" asserts="0" seed="1329390280" />
            <test-case name="GetActorByNameShouldReturnAnActorOfTheSpecifiedName(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.Actors.CastTests.GetActorByNameShouldReturnAnActorOfTheSpecifiedName(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" methodname="GetActorByNameShouldReturnAnActorOfTheSpecifiedName(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" classname="CastTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.008451" asserts="0" seed="1333686048" />
            <test-case name="GetActorByNameShouldReturnTheSameActorIfUsedTwice(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.Actors.CastTests.GetActorByNameShouldReturnTheSameActorIfUsedTwice(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" methodname="GetActorByNameShouldReturnTheSameActorIfUsedTwice(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IServiceProvider&gt;)" classname="CastTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.005767" asserts="0" seed="931689514" />
            <test-case name="GetActorByPersonaShouldExecuteThePersona(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IPersona&gt;,auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.Actors.CastTests.GetActorByPersonaShouldExecuteThePersona(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IPersona&gt;,auto&lt;IServiceProvider&gt;)" methodname="GetActorByPersonaShouldExecuteThePersona(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IPersona&gt;,auto&lt;IServiceProvider&gt;)" classname="CastTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.008418" asserts="0" seed="1295239693" />
            <test-case name="GetActorByPersonaShouldExecuteThePersonaOnlyOnceEvenIfUsedThreeTimes(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IPersona&gt;,auto&lt;IServiceProvider&gt;)" fullname="CSF.Screenplay.Actors.CastTests.GetActorByPersonaShouldExecuteThePersonaOnlyOnceEvenIfUsedThreeTimes(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IPersona&gt;,auto&lt;IServiceProvider&gt;)" methodname="GetActorByPersonaShouldExecuteThePersonaOnlyOnceEvenIfUsedThreeTimes(auto&lt;String&gt;,auto&lt;Guid&gt;,auto&lt;IRelaysPerformanceEvents&gt;,auto&lt;IPersona&gt;,auto&lt;IServiceProvider&gt;)" classname="CastTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002154" asserts="0" seed="1920430128" />
          </test-suite>
          <test-suite type="TestFixture" name="StageTests" fullname="CSF.Screenplay.Actors.StageTests" classname="CSF.Screenplay.Actors.StageTests" total="6" passed="6" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.007102">
            <test-case name="GetSpotlitActorShouldReturnAnActorAfterTheyAreSpotlit(auto&lt;Stage&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.Actors.StageTests.GetSpotlitActorShouldReturnAnActorAfterTheyAreSpotlit(auto&lt;Stage&gt;,auto&lt;Actor&gt;)" methodname="GetSpotlitActorShouldReturnAnActorAfterTheyAreSpotlit(auto&lt;Stage&gt;,auto&lt;Actor&gt;)" classname="StageTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001146" asserts="0" seed="513247986" />
            <test-case name="GetSpotlitActorShouldReturnNullWhenNoActorIsSpotlit(auto&lt;Stage&gt;)" fullname="CSF.Screenplay.Actors.StageTests.GetSpotlitActorShouldReturnNullWhenNoActorIsSpotlit(auto&lt;Stage&gt;)" methodname="GetSpotlitActorShouldReturnNullWhenNoActorIsSpotlit(auto&lt;Stage&gt;)" classname="StageTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000563" asserts="0" seed="2024773859" />
            <test-case name="SpotlightForAnActorShouldReplaceTheActorInTheSpotlight(auto&lt;Stage&gt;,auto&lt;Actor&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.Actors.StageTests.SpotlightForAnActorShouldReplaceTheActorInTheSpotlight(auto&lt;Stage&gt;,auto&lt;Actor&gt;,auto&lt;Actor&gt;)" methodname="SpotlightForAnActorShouldReplaceTheActorInTheSpotlight(auto&lt;Stage&gt;,auto&lt;Actor&gt;,auto&lt;Actor&gt;)" classname="StageTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000486" asserts="0" seed="207238719" />
            <test-case name="SpotlightForAPersonaShouldSpotlightTheActorReturnedByThePersonaAndTheCast(auto&lt;ICast&gt;,auto&lt;Stage&gt;,auto&lt;IPersona&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.Actors.StageTests.SpotlightForAPersonaShouldSpotlightTheActorReturnedByThePersonaAndTheCast(auto&lt;ICast&gt;,auto&lt;Stage&gt;,auto&lt;IPersona&gt;,auto&lt;Actor&gt;)" methodname="SpotlightForAPersonaShouldSpotlightTheActorReturnedByThePersonaAndTheCast(auto&lt;ICast&gt;,auto&lt;Stage&gt;,auto&lt;IPersona&gt;,auto&lt;Actor&gt;)" classname="StageTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002716" asserts="0" seed="1512495875" />
            <test-case name="TurnSpotlightOffShouldNotThrowIfNoActorIsSpotlit(auto&lt;Stage&gt;)" fullname="CSF.Screenplay.Actors.StageTests.TurnSpotlightOffShouldNotThrowIfNoActorIsSpotlit(auto&lt;Stage&gt;)" methodname="TurnSpotlightOffShouldNotThrowIfNoActorIsSpotlit(auto&lt;Stage&gt;)" classname="StageTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001307" asserts="0" seed="894766557" />
            <test-case name="TurnSpotlightOffShouldRemoveAnActorFromTheSpotlight(auto&lt;Stage&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.Actors.StageTests.TurnSpotlightOffShouldRemoveAnActorFromTheSpotlight(auto&lt;Stage&gt;,auto&lt;Actor&gt;)" methodname="TurnSpotlightOffShouldRemoveAnActorFromTheSpotlight(auto&lt;Stage&gt;,auto&lt;Actor&gt;)" classname="StageTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000884" asserts="0" seed="1078245534" />
          </test-suite>
        </test-suite>
        <test-suite type="TestSuite" name="Integration" fullname="CSF.Screenplay.Integration" total="9" passed="9" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.062534">
          <test-suite type="TestFixture" name="EventBusIntegrationTests" fullname="CSF.Screenplay.Integration.EventBusIntegrationTests" classname="CSF.Screenplay.Integration.EventBusIntegrationTests" total="8" passed="8" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.0584">
            <test-case name="BeginScreenplayShouldEmitTheCorrectEvent(auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.Integration.EventBusIntegrationTests.BeginScreenplayShouldEmitTheCorrectEvent(auto&lt;Screenplay&gt;)" methodname="BeginScreenplayShouldEmitTheCorrectEvent(auto&lt;Screenplay&gt;)" classname="EventBusIntegrationTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.004718" asserts="0" seed="2116346765" />
            <test-case name="CompleteScreenplayShouldEmitTheCorrectEvent(auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.Integration.EventBusIntegrationTests.CompleteScreenplayShouldEmitTheCorrectEvent(auto&lt;Screenplay&gt;)" methodname="CompleteScreenplayShouldEmitTheCorrectEvent(auto&lt;Screenplay&gt;)" classname="EventBusIntegrationTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001492" asserts="0" seed="1049762005" />
            <test-case name="ExecuteAsPerformanceAsyncShouldEmitCorrectActorAbilityEvents(auto&lt;Object&gt;,auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.Integration.EventBusIntegrationTests.ExecuteAsPerformanceAsyncShouldEmitCorrectActorAbilityEvents(auto&lt;Object&gt;,auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceAsyncShouldEmitCorrectActorAbilityEvents(auto&lt;Object&gt;,auto&lt;Screenplay&gt;)" classname="EventBusIntegrationTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.017769" asserts="0" seed="23051614" />
            <test-case name="ExecuteAsPerformanceAsyncShouldEmitCorrectPerformableFailureEventsWhenItThrows(auto&lt;ThrowingAction&gt;,auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.Integration.EventBusIntegrationTests.ExecuteAsPerformanceAsyncShouldEmitCorrectPerformableFailureEventsWhenItThrows(auto&lt;ThrowingAction&gt;,auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceAsyncShouldEmitCorrectPerformableFailureEventsWhenItThrows(auto&lt;ThrowingAction&gt;,auto&lt;Screenplay&gt;)" classname="EventBusIntegrationTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.010488" asserts="0" seed="1736221966" />
            <test-case name="ExecuteAsPerformanceAsyncShouldEmitCorrectPerformanceEvents(auto&lt;SampleAction&gt;,auto&lt;SampleGenericQuestion&gt;,auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.Integration.EventBusIntegrationTests.ExecuteAsPerformanceAsyncShouldEmitCorrectPerformanceEvents(auto&lt;SampleAction&gt;,auto&lt;SampleGenericQuestion&gt;,auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceAsyncShouldEmitCorrectPerformanceEvents(auto&lt;SampleAction&gt;,auto&lt;SampleGenericQuestion&gt;,auto&lt;Screenplay&gt;)" classname="EventBusIntegrationTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.016946" asserts="0" seed="2131079369" />
            <test-case name="ExecuteAsPerformanceAsyncShouldEmitCorrectSpotlightEvents(auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.Integration.EventBusIntegrationTests.ExecuteAsPerformanceAsyncShouldEmitCorrectSpotlightEvents(auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceAsyncShouldEmitCorrectSpotlightEvents(auto&lt;Screenplay&gt;)" classname="EventBusIntegrationTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002984" asserts="0" seed="1286586377" />
            <test-case name="ExecuteAsPerformanceAsyncShouldRecordThePerformanceAsAFailureIfItReturnsFalse(auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.Integration.EventBusIntegrationTests.ExecuteAsPerformanceAsyncShouldRecordThePerformanceAsAFailureIfItReturnsFalse(auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceAsyncShouldRecordThePerformanceAsAFailureIfItReturnsFalse(auto&lt;Screenplay&gt;)" classname="EventBusIntegrationTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001311" asserts="0" seed="41609911" />
            <test-case name="RecordAssetShouldEmitTheCorrectEvent(auto&lt;Screenplay&gt;,auto&lt;String&gt;,auto&lt;String&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Integration.EventBusIntegrationTests.RecordAssetShouldEmitTheCorrectEvent(auto&lt;Screenplay&gt;,auto&lt;String&gt;,auto&lt;String&gt;,auto&lt;Object&gt;)" methodname="RecordAssetShouldEmitTheCorrectEvent(auto&lt;Screenplay&gt;,auto&lt;String&gt;,auto&lt;String&gt;,auto&lt;Object&gt;)" classname="EventBusIntegrationTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002692" asserts="0" seed="1821621842" />
          </test-suite>
          <test-suite type="TestFixture" name="PerformanceIntegrationTests" fullname="CSF.Screenplay.Integration.PerformanceIntegrationTests" classname="CSF.Screenplay.Integration.PerformanceIntegrationTests" total="1" passed="1" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.004134">
            <test-case name="ExecuteAsPerformanceAsyncShouldExecuteThreePerformables(auto&lt;SampleAction&gt;,auto&lt;SampleQuestion&gt;,auto&lt;SampleGenericQuestion&gt;,auto&lt;Screenplay&gt;)" fullname="CSF.Screenplay.Integration.PerformanceIntegrationTests.ExecuteAsPerformanceAsyncShouldExecuteThreePerformables(auto&lt;SampleAction&gt;,auto&lt;SampleQuestion&gt;,auto&lt;SampleGenericQuestion&gt;,auto&lt;Screenplay&gt;)" methodname="ExecuteAsPerformanceAsyncShouldExecuteThreePerformables(auto&lt;SampleAction&gt;,auto&lt;SampleQuestion&gt;,auto&lt;SampleGenericQuestion&gt;,auto&lt;Screenplay&gt;)" classname="PerformanceIntegrationTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.004134" asserts="0" seed="726531722" />
          </test-suite>
        </test-suite>
        <test-suite type="TestSuite" name="JsonToHtmlReport" fullname="CSF.Screenplay.JsonToHtmlReport" total="1" passed="1" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.005106">
          <test-suite type="TestFixture" name="TemplateReaderTests" fullname="CSF.Screenplay.JsonToHtmlReport.TemplateReaderTests" classname="CSF.Screenplay.JsonToHtmlReport.TemplateReaderTests" total="1" passed="1" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.005106">
            <test-case name="ReadTemplateShouldReturnAString(auto&lt;TemplateReader&gt;)" fullname="CSF.Screenplay.JsonToHtmlReport.TemplateReaderTests.ReadTemplateShouldReturnAString(auto&lt;TemplateReader&gt;)" methodname="ReadTemplateShouldReturnAString(auto&lt;TemplateReader&gt;)" classname="TemplateReaderTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.005106" asserts="0" seed="895214087" />
          </test-suite>
        </test-suite>
        <test-suite type="TestSuite" name="Performables" fullname="CSF.Screenplay.Performables" total="9" passed="9" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:51Z" duration="0.5518048">
          <test-suite type="TestFixture" name="StopwatchTests" fullname="CSF.Screenplay.Performables.StopwatchTests" classname="CSF.Screenplay.Performables.StopwatchTests" total="3" passed="3" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:51Z" duration="0.545618">
            <test-case name="ReadingTheStopwatchAfterStoppedShouldProduceTheSameResult()" fullname="CSF.Screenplay.Performables.StopwatchTests.ReadingTheStopwatchAfterStoppedShouldProduceTheSameResult()" methodname="ReadingTheStopwatchAfterStoppedShouldProduceTheSameResult()" classname="StopwatchTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:51Z" duration="0.222547" asserts="0" seed="2043383816" />
            <test-case name="ResettingTheStopwatchWhilstStoppedShouldProduceAZeroResult()" fullname="CSF.Screenplay.Performables.StopwatchTests.ResettingTheStopwatchWhilstStoppedShouldProduceAZeroResult()" methodname="ResettingTheStopwatchWhilstStoppedShouldProduceAZeroResult()" classname="StopwatchTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.160297" asserts="0" seed="268939250" />
            <test-case name="StartingAndReadingTheStopwatchShouldProducePlausibleResults()" fullname="CSF.Screenplay.Performables.StopwatchTests.StartingAndReadingTheStopwatchShouldProducePlausibleResults()" methodname="StartingAndReadingTheStopwatchShouldProducePlausibleResults()" classname="StopwatchTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.162774" asserts="0" seed="344497359" />
          </test-suite>
          <test-suite type="TestFixture" name="TimeSpanBuilderTests" fullname="CSF.Screenplay.Performables.TimeSpanBuilderTests" classname="CSF.Screenplay.Performables.TimeSpanBuilderTests" total="6" passed="6" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.0061868">
            <test-case name="DaysShouldCreateAnAmountInDays(auto&lt;Object&gt;)" fullname="CSF.Screenplay.Performables.TimeSpanBuilderTests.DaysShouldCreateAnAmountInDays(auto&lt;Object&gt;)" methodname="DaysShouldCreateAnAmountInDays(auto&lt;Object&gt;)" classname="TimeSpanBuilderTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002249" asserts="0" seed="466110349" />
            <test-case name="GetTimeSpanShouldReturnACorrectTimeSpanInTheContextOfALargerBuilderIntegrationTest(auto&lt;Actor&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.Performables.TimeSpanBuilderTests.GetTimeSpanShouldReturnACorrectTimeSpanInTheContextOfALargerBuilderIntegrationTest(auto&lt;Actor&gt;,auto&lt;String&gt;)" methodname="GetTimeSpanShouldReturnACorrectTimeSpanInTheContextOfALargerBuilderIntegrationTest(auto&lt;Actor&gt;,auto&lt;String&gt;)" classname="TimeSpanBuilderTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.002389" asserts="0" seed="1676270860" />
            <test-case name="HoursShouldCreateAnAmountInHours(auto&lt;Object&gt;)" fullname="CSF.Screenplay.Performables.TimeSpanBuilderTests.HoursShouldCreateAnAmountInHours(auto&lt;Object&gt;)" methodname="HoursShouldCreateAnAmountInHours(auto&lt;Object&gt;)" classname="TimeSpanBuilderTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000431" asserts="0" seed="1841771168" />
            <test-case name="MillisecondsShouldCreateAnAmountInMilliseconds(auto&lt;Object&gt;)" fullname="CSF.Screenplay.Performables.TimeSpanBuilderTests.MillisecondsShouldCreateAnAmountInMilliseconds(auto&lt;Object&gt;)" methodname="MillisecondsShouldCreateAnAmountInMilliseconds(auto&lt;Object&gt;)" classname="TimeSpanBuilderTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000384" asserts="0" seed="1577913606" />
            <test-case name="MinutesShouldCreateAnAmountInMinutes(auto&lt;Object&gt;)" fullname="CSF.Screenplay.Performables.TimeSpanBuilderTests.MinutesShouldCreateAnAmountInMinutes(auto&lt;Object&gt;)" methodname="MinutesShouldCreateAnAmountInMinutes(auto&lt;Object&gt;)" classname="TimeSpanBuilderTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.0003379" asserts="0" seed="2005347921" />
            <test-case name="SecondsShouldCreateAnAmountInSeconds(auto&lt;Object&gt;)" fullname="CSF.Screenplay.Performables.TimeSpanBuilderTests.SecondsShouldCreateAnAmountInSeconds(auto&lt;Object&gt;)" methodname="SecondsShouldCreateAnAmountInSeconds(auto&lt;Object&gt;)" classname="TimeSpanBuilderTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.0003959" asserts="0" seed="1160559348" />
          </test-suite>
        </test-suite>
        <test-suite type="TestSuite" name="Reporting" fullname="CSF.Screenplay.Reporting" total="91" passed="91" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:52Z" duration="1.5853356">
          <test-suite type="TestFixture" name="FormattableFormatterTests" fullname="CSF.Screenplay.Reporting.FormattableFormatterTests" classname="CSF.Screenplay.Reporting.FormattableFormatterTests" total="3" passed="3" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001816">
            <test-case name="CanFormatShouldReturnFalseForAnObjectWhichCannotBeFormatted(auto&lt;FormattableFormatter&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Reporting.FormattableFormatterTests.CanFormatShouldReturnFalseForAnObjectWhichCannotBeFormatted(auto&lt;FormattableFormatter&gt;,auto&lt;Object&gt;)" methodname="CanFormatShouldReturnFalseForAnObjectWhichCannotBeFormatted(auto&lt;FormattableFormatter&gt;,auto&lt;Object&gt;)" classname="FormattableFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000245" asserts="0" seed="1116473750" />
            <test-case name="CanFormatShouldReturnTrueForAnObjectWhichCannotBeFormatted(auto&lt;FormattableFormatter&gt;,auto&lt;IFormattableValue&gt;)" fullname="CSF.Screenplay.Reporting.FormattableFormatterTests.CanFormatShouldReturnTrueForAnObjectWhichCannotBeFormatted(auto&lt;FormattableFormatter&gt;,auto&lt;IFormattableValue&gt;)" methodname="CanFormatShouldReturnTrueForAnObjectWhichCannotBeFormatted(auto&lt;FormattableFormatter&gt;,auto&lt;IFormattableValue&gt;)" classname="FormattableFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000145" asserts="0" seed="208065890" />
            <test-case name="FormatShouldReturnACorrectlyFormattedString(auto&lt;FormattableFormatter&gt;,auto&lt;IFormattableValue&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.Reporting.FormattableFormatterTests.FormatShouldReturnACorrectlyFormattedString(auto&lt;FormattableFormatter&gt;,auto&lt;IFormattableValue&gt;,auto&lt;String&gt;)" methodname="FormatShouldReturnACorrectlyFormattedString(auto&lt;FormattableFormatter&gt;,auto&lt;IFormattableValue&gt;,auto&lt;String&gt;)" classname="FormattableFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.001426" asserts="0" seed="308286738" />
          </test-suite>
          <test-suite type="TestFixture" name="HumanizerFormatterTests" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests" classname="CSF.Screenplay.Reporting.HumanizerFormatterTests" total="16" passed="16" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:51Z" duration="0.2307619">
            <test-case name="CanFormatShouldReturnFalseForANullReference(auto&lt;HumanizerFormatter&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.CanFormatShouldReturnFalseForANullReference(auto&lt;HumanizerFormatter&gt;)" methodname="CanFormatShouldReturnFalseForANullReference(auto&lt;HumanizerFormatter&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.00049" asserts="0" seed="1148457926" />
            <test-case name="CanFormatShouldReturnFalseForAPlainObject(auto&lt;HumanizerFormatter&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.CanFormatShouldReturnFalseForAPlainObject(auto&lt;HumanizerFormatter&gt;,auto&lt;Object&gt;)" methodname="CanFormatShouldReturnFalseForAPlainObject(auto&lt;HumanizerFormatter&gt;,auto&lt;Object&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000416" asserts="0" seed="1361893809" />
            <test-case name="CanFormatShouldReturnTrueForADateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.CanFormatShouldReturnTrueForADateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" methodname="CanFormatShouldReturnTrueForADateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.00016" asserts="0" seed="1627511348" />
            <test-case name="CanFormatShouldReturnTrueForAnEnumType(auto&lt;HumanizerFormatter&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.CanFormatShouldReturnTrueForAnEnumType(auto&lt;HumanizerFormatter&gt;)" methodname="CanFormatShouldReturnTrueForAnEnumType(auto&lt;HumanizerFormatter&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.00027" asserts="0" seed="1389257913" />
            <test-case name="CanFormatShouldReturnTrueForANonNullNullableDateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.CanFormatShouldReturnTrueForANonNullNullableDateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" methodname="CanFormatShouldReturnTrueForANonNullNullableDateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000224" asserts="0" seed="833153486" />
            <test-case name="CanFormatShouldReturnTrueForANonNullNullableTimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.CanFormatShouldReturnTrueForANonNullNullableTimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" methodname="CanFormatShouldReturnTrueForANonNullNullableTimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000174" asserts="0" seed="765315057" />
            <test-case name="CanFormatShouldReturnTrueForAStringCollection(auto&lt;HumanizerFormatter&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.CanFormatShouldReturnTrueForAStringCollection(auto&lt;HumanizerFormatter&gt;)" methodname="CanFormatShouldReturnTrueForAStringCollection(auto&lt;HumanizerFormatter&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000202" asserts="0" seed="691156172" />
            <test-case name="CanFormatShouldReturnTrueForATimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.CanFormatShouldReturnTrueForATimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" methodname="CanFormatShouldReturnTrueForATimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:50Z" duration="0.000158" asserts="0" seed="1263363160" />
            <test-case name="FormatShouldReturnAStringForADateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.FormatShouldReturnAStringForADateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" methodname="FormatShouldReturnAStringForADateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:50Z" end-time="2024-11-08T15:25:51Z" duration="0.190687" asserts="0" seed="949621318" />
            <test-case name="FormatShouldReturnAStringForAnEnumValue(auto&lt;HumanizerFormatter&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.FormatShouldReturnAStringForAnEnumValue(auto&lt;HumanizerFormatter&gt;)" methodname="FormatShouldReturnAStringForAnEnumValue(auto&lt;HumanizerFormatter&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.022796" asserts="0" seed="37341745" />
            <test-case name="FormatShouldReturnAStringForAnEnumValueRespectingTheDescription(auto&lt;HumanizerFormatter&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.FormatShouldReturnAStringForAnEnumValueRespectingTheDescription(auto&lt;HumanizerFormatter&gt;)" methodname="FormatShouldReturnAStringForAnEnumValueRespectingTheDescription(auto&lt;HumanizerFormatter&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001436" asserts="0" seed="805212453" />
            <test-case name="FormatShouldReturnAStringForANonNullNullableDateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.FormatShouldReturnAStringForANonNullNullableDateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" methodname="FormatShouldReturnAStringForANonNullNullableDateTime(auto&lt;HumanizerFormatter&gt;,auto&lt;DateTime&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000464" asserts="0" seed="1983140980" />
            <test-case name="FormatShouldReturnAStringForANonNullNullableTimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.FormatShouldReturnAStringForANonNullNullableTimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" methodname="FormatShouldReturnAStringForANonNullNullableTimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.006485" asserts="0" seed="116746931" />
            <test-case name="FormatShouldReturnAStringForAStringCollection(auto&lt;HumanizerFormatter&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.FormatShouldReturnAStringForAStringCollection(auto&lt;HumanizerFormatter&gt;)" methodname="FormatShouldReturnAStringForAStringCollection(auto&lt;HumanizerFormatter&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.003832" asserts="0" seed="965959852" />
            <test-case name="FormatShouldReturnAStringForATimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.FormatShouldReturnAStringForATimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" methodname="FormatShouldReturnAStringForATimeSpan(auto&lt;HumanizerFormatter&gt;,auto&lt;TimeSpan&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000287" asserts="0" seed="2111205564" />
            <test-case name="FormatShouldThrowForAnUnsupportedValue(auto&lt;HumanizerFormatter&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Reporting.HumanizerFormatterTests.FormatShouldThrowForAnUnsupportedValue(auto&lt;HumanizerFormatter&gt;,auto&lt;Object&gt;)" methodname="FormatShouldThrowForAnUnsupportedValue(auto&lt;HumanizerFormatter&gt;,auto&lt;Object&gt;)" classname="HumanizerFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0026809" asserts="0" seed="1844009622" />
          </test-suite>
          <test-suite type="TestFixture" name="JsonScreenplayReporterTest" fullname="CSF.Screenplay.Reporting.JsonScreenplayReporterTest" classname="CSF.Screenplay.Reporting.JsonScreenplayReporterTest" total="3" passed="3" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.052134">
            <test-case name="Dispose_ShouldUnsubscribeFromEvents(auto&lt;Mock`1&gt;,auto&lt;JsonScreenplayReporter&gt;)" fullname="CSF.Screenplay.Reporting.JsonScreenplayReporterTest.Dispose_ShouldUnsubscribeFromEvents(auto&lt;Mock`1&gt;,auto&lt;JsonScreenplayReporter&gt;)" methodname="Dispose_ShouldUnsubscribeFromEvents(auto&lt;Mock`1&gt;,auto&lt;JsonScreenplayReporter&gt;)" classname="JsonScreenplayReporterTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.03663" asserts="0" seed="1825213085" />
            <test-case name="SubscribeTo_ShouldSubscribeToEvents(auto&lt;Mock`1&gt;,auto&lt;JsonScreenplayReporter&gt;)" fullname="CSF.Screenplay.Reporting.JsonScreenplayReporterTest.SubscribeTo_ShouldSubscribeToEvents(auto&lt;Mock`1&gt;,auto&lt;JsonScreenplayReporter&gt;)" methodname="SubscribeTo_ShouldSubscribeToEvents(auto&lt;Mock`1&gt;,auto&lt;JsonScreenplayReporter&gt;)" classname="JsonScreenplayReporterTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.008774" asserts="0" seed="882154839" />
            <test-case name="UnsubscribeFrom_ShouldUnsubscribeFromEvents(auto&lt;Mock`1&gt;,auto&lt;JsonScreenplayReporter&gt;)" fullname="CSF.Screenplay.Reporting.JsonScreenplayReporterTest.UnsubscribeFrom_ShouldUnsubscribeFromEvents(auto&lt;Mock`1&gt;,auto&lt;JsonScreenplayReporter&gt;)" methodname="UnsubscribeFrom_ShouldUnsubscribeFromEvents(auto&lt;Mock`1&gt;,auto&lt;JsonScreenplayReporter&gt;)" classname="JsonScreenplayReporterTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.00673" asserts="0" seed="1355122373" />
          </test-suite>
          <test-suite type="TestFixture" name="JsonScreenplayReportReaderTests" fullname="CSF.Screenplay.Reporting.JsonScreenplayReportReaderTests" classname="CSF.Screenplay.Reporting.JsonScreenplayReportReaderTests" total="1" passed="1" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.172277">
            <test-case name="DeserializeAsyncShouldReturnAScreenplayReport(auto&lt;JsonScreenplayReportReader&gt;)" fullname="CSF.Screenplay.Reporting.JsonScreenplayReportReaderTests.DeserializeAsyncShouldReturnAScreenplayReport(auto&lt;JsonScreenplayReportReader&gt;)" methodname="DeserializeAsyncShouldReturnAScreenplayReport(auto&lt;JsonScreenplayReportReader&gt;)" classname="JsonScreenplayReportReaderTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.172277" asserts="0" seed="1443127714" />
          </test-suite>
          <test-suite type="TestFixture" name="NameFormatterTests" fullname="CSF.Screenplay.Reporting.NameFormatterTests" classname="CSF.Screenplay.Reporting.NameFormatterTests" total="3" passed="3" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001874">
            <test-case name="CanFormatShouldReturnFalseForAnObjectWhichCannotBeFormatted(auto&lt;NameFormatter&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Reporting.NameFormatterTests.CanFormatShouldReturnFalseForAnObjectWhichCannotBeFormatted(auto&lt;NameFormatter&gt;,auto&lt;Object&gt;)" methodname="CanFormatShouldReturnFalseForAnObjectWhichCannotBeFormatted(auto&lt;NameFormatter&gt;,auto&lt;Object&gt;)" classname="NameFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000249" asserts="0" seed="2099266846" />
            <test-case name="CanFormatShouldReturnTrueForAnObjectWhichCannotBeFormatted(auto&lt;NameFormatter&gt;,auto&lt;IHasName&gt;)" fullname="CSF.Screenplay.Reporting.NameFormatterTests.CanFormatShouldReturnTrueForAnObjectWhichCannotBeFormatted(auto&lt;NameFormatter&gt;,auto&lt;IHasName&gt;)" methodname="CanFormatShouldReturnTrueForAnObjectWhichCannotBeFormatted(auto&lt;NameFormatter&gt;,auto&lt;IHasName&gt;)" classname="NameFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000176" asserts="0" seed="1656537091" />
            <test-case name="FormatShouldReturnACorrectlyFormattedString(auto&lt;NameFormatter&gt;,auto&lt;IHasName&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.Reporting.NameFormatterTests.FormatShouldReturnACorrectlyFormattedString(auto&lt;NameFormatter&gt;,auto&lt;IHasName&gt;,auto&lt;String&gt;)" methodname="FormatShouldReturnACorrectlyFormattedString(auto&lt;NameFormatter&gt;,auto&lt;IHasName&gt;,auto&lt;String&gt;)" classname="NameFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001449" asserts="0" seed="1663378347" />
          </test-suite>
          <test-suite type="TestFixture" name="PerformanceReportBuilderTest" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest" classname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest" total="15" passed="15" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.034724">
            <test-case name="ActorCreatedShouldAddAnActorCreatedReportableWithTheCorrectNameAndReportText(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Nullable`1&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.ActorCreatedShouldAddAnActorCreatedReportableWithTheCorrectNameAndReportText(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Nullable`1&gt;,auto&lt;Actor&gt;)" methodname="ActorCreatedShouldAddAnActorCreatedReportableWithTheCorrectNameAndReportText(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Nullable`1&gt;,auto&lt;Actor&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002922" asserts="0" seed="780181831" />
            <test-case name="ActorGainedAbilityShouldAddAGainedAbilityReportableWithAGeneratedReportIfItIsNotIReportable(auto&lt;IGetsValueFormatter&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;IValueFormatter&gt;,auto&lt;Nullable`1&gt;,auto&lt;Object&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.ActorGainedAbilityShouldAddAGainedAbilityReportableWithAGeneratedReportIfItIsNotIReportable(auto&lt;IGetsValueFormatter&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;IValueFormatter&gt;,auto&lt;Nullable`1&gt;,auto&lt;Object&gt;,auto&lt;Actor&gt;)" methodname="ActorGainedAbilityShouldAddAGainedAbilityReportableWithAGeneratedReportIfItIsNotIReportable(auto&lt;IGetsValueFormatter&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;IValueFormatter&gt;,auto&lt;Nullable`1&gt;,auto&lt;Object&gt;,auto&lt;Actor&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.003286" asserts="0" seed="1877945971" />
            <test-case name="ActorGainedAbilityShouldAddAGainedAbilityReportableWithAnAbilityGeneratedReportIfItIsIReportable(auto&lt;IFormatsReportFragment&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Nullable`1&gt;,auto&lt;ICanReport&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.ActorGainedAbilityShouldAddAGainedAbilityReportableWithAnAbilityGeneratedReportIfItIsIReportable(auto&lt;IFormatsReportFragment&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Nullable`1&gt;,auto&lt;ICanReport&gt;,auto&lt;Actor&gt;)" methodname="ActorGainedAbilityShouldAddAGainedAbilityReportableWithAnAbilityGeneratedReportIfItIsIReportable(auto&lt;IFormatsReportFragment&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Nullable`1&gt;,auto&lt;ICanReport&gt;,auto&lt;Actor&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.011485" asserts="0" seed="951593749" />
            <test-case name="ActorSpotlitShouldAddASpotlitReportableWithTheCorrectReportText(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.ActorSpotlitShouldAddASpotlitReportableWithTheCorrectReportText(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;)" methodname="ActorSpotlitShouldAddASpotlitReportableWithTheCorrectReportText(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000884" asserts="0" seed="1432997183" />
            <test-case name="BeginAndEndPerformableShouldAddAPerformableReportableWithCorrectValuesIfPerformableIsReportable(auto&lt;IFormatsReportFragment&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;StartTheStopwatch&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.BeginAndEndPerformableShouldAddAPerformableReportableWithCorrectValuesIfPerformableIsReportable(auto&lt;IFormatsReportFragment&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;StartTheStopwatch&gt;,auto&lt;String&gt;)" methodname="BeginAndEndPerformableShouldAddAPerformableReportableWithCorrectValuesIfPerformableIsReportable(auto&lt;IFormatsReportFragment&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;StartTheStopwatch&gt;,auto&lt;String&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.005573" asserts="0" seed="12331035" />
            <test-case name="BeginAndEndPerformableShouldAddAPerformableReportableWithFallbackReportIfPerformableIsNotReportable(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.BeginAndEndPerformableShouldAddAPerformableReportableWithFallbackReportIfPerformableIsNotReportable(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" methodname="BeginAndEndPerformableShouldAddAPerformableReportableWithFallbackReportIfPerformableIsNotReportable(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000552" asserts="0" seed="2115794738" />
            <test-case name="BeginAndEndPerformableShouldBeAbleToCreateAHierarchyOfPerformableReports(auto&lt;IFormatsReportFragment&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;TaskPerformable&gt;,auto&lt;StartTheStopwatch&gt;,auto&lt;StopTheStopwatch&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.BeginAndEndPerformableShouldBeAbleToCreateAHierarchyOfPerformableReports(auto&lt;IFormatsReportFragment&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;TaskPerformable&gt;,auto&lt;StartTheStopwatch&gt;,auto&lt;StopTheStopwatch&gt;,auto&lt;String&gt;)" methodname="BeginAndEndPerformableShouldBeAbleToCreateAHierarchyOfPerformableReports(auto&lt;IFormatsReportFragment&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;TaskPerformable&gt;,auto&lt;StartTheStopwatch&gt;,auto&lt;StopTheStopwatch&gt;,auto&lt;String&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.003163" asserts="0" seed="1949944408" />
            <test-case name="GetReportShouldReturnReportWithCompletedOutcomeWhenSuccessIsNull(auto&lt;PerformanceReportBuilder&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.GetReportShouldReturnReportWithCompletedOutcomeWhenSuccessIsNull(auto&lt;PerformanceReportBuilder&gt;)" methodname="GetReportShouldReturnReportWithCompletedOutcomeWhenSuccessIsNull(auto&lt;PerformanceReportBuilder&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000525" asserts="0" seed="1829118138" />
            <test-case name="GetReportShouldReturnReportWithFailedOutcomeWhenSuccessIsFalse(auto&lt;PerformanceReportBuilder&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.GetReportShouldReturnReportWithFailedOutcomeWhenSuccessIsFalse(auto&lt;PerformanceReportBuilder&gt;)" methodname="GetReportShouldReturnReportWithFailedOutcomeWhenSuccessIsFalse(auto&lt;PerformanceReportBuilder&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000432" asserts="0" seed="1520930368" />
            <test-case name="GetReportShouldReturnReportWithSuccessOutcomeWhenSuccessIsTrue(auto&lt;PerformanceReportBuilder&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.GetReportShouldReturnReportWithSuccessOutcomeWhenSuccessIsTrue(auto&lt;PerformanceReportBuilder&gt;)" methodname="GetReportShouldReturnReportWithSuccessOutcomeWhenSuccessIsTrue(auto&lt;PerformanceReportBuilder&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.00053" asserts="0" seed="64934038" />
            <test-case name="RecordAssetForCurrentPerformableShouldAddAnAssetToTheReportable(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;Object&gt;,auto&lt;String&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.RecordAssetForCurrentPerformableShouldAddAnAssetToTheReportable(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;Object&gt;,auto&lt;String&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" methodname="RecordAssetForCurrentPerformableShouldAddAnAssetToTheReportable(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;Object&gt;,auto&lt;String&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000957" asserts="0" seed="2042038284" />
            <test-case name="RecordFailureForCurrentPerformableShouldAddTheExceptionStringToTheReportable(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.RecordFailureForCurrentPerformableShouldAddTheExceptionStringToTheReportable(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" methodname="RecordFailureForCurrentPerformableShouldAddTheExceptionStringToTheReportable(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001043" asserts="0" seed="940391066" />
            <test-case name="RecordFailureForCurrentPerformableShouldSetExceptionIsFromConsumedPerformableToTrueIfTheExceptionIsPerformableException(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.RecordFailureForCurrentPerformableShouldSetExceptionIsFromConsumedPerformableToTrueIfTheExceptionIsPerformableException(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" methodname="RecordFailureForCurrentPerformableShouldSetExceptionIsFromConsumedPerformableToTrueIfTheExceptionIsPerformableException(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;String&gt;,auto&lt;String&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000554" asserts="0" seed="772282130" />
            <test-case name="RecordResultForCurrentPerformableShouldAddTheFormattedResultToTheReportable(auto&lt;IGetsValueFormatter&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;Object&gt;,auto&lt;String&gt;,auto&lt;IValueFormatter&gt;,auto&lt;Object&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.RecordResultForCurrentPerformableShouldAddTheFormattedResultToTheReportable(auto&lt;IGetsValueFormatter&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;Object&gt;,auto&lt;String&gt;,auto&lt;IValueFormatter&gt;,auto&lt;Object&gt;,auto&lt;String&gt;)" methodname="RecordResultForCurrentPerformableShouldAddTheFormattedResultToTheReportable(auto&lt;IGetsValueFormatter&gt;,auto&lt;PerformanceReportBuilder&gt;,auto&lt;Actor&gt;,auto&lt;Nullable`1&gt;,auto&lt;Object&gt;,auto&lt;String&gt;,auto&lt;IValueFormatter&gt;,auto&lt;Object&gt;,auto&lt;String&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002023" asserts="0" seed="168286694" />
            <test-case name="SpotlightTurnedOffShouldAddASpotlightOffReportableWithTheCorrectReportText(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Nullable`1&gt;)" fullname="CSF.Screenplay.Reporting.PerformanceReportBuilderTest.SpotlightTurnedOffShouldAddASpotlightOffReportableWithTheCorrectReportText(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Nullable`1&gt;)" methodname="SpotlightTurnedOffShouldAddASpotlightOffReportableWithTheCorrectReportText(auto&lt;PerformanceReportBuilder&gt;,auto&lt;Nullable`1&gt;)" classname="PerformanceReportBuilderTest" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000795" asserts="0" seed="2131177989" />
          </test-suite>
          <test-suite type="TestFixture" name="ReportFormatCreatorTests" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests" classname="CSF.Screenplay.Reporting.ReportFormatCreatorTests" total="23" passed="23" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0120168">
            <test-case name="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;&quot;,&quot;&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;&quot;,&quot;&quot;)" methodname="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;&quot;,&quot;&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002067" asserts="0" seed="1030422274" />
            <test-case name="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;foo bar baz&quot;,&quot;foo bar baz&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;foo bar baz&quot;,&quot;foo bar baz&quot;)" methodname="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;foo bar baz&quot;,&quot;foo bar baz&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000296" asserts="0" seed="197941980" />
            <test-case name="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;foo {{bar}} baz&quot;,&quot;foo {{bar}} baz&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;foo {{bar}} baz&quot;,&quot;foo {{bar}} baz&quot;)" methodname="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;foo {{bar}} baz&quot;,&quot;foo {{bar}} baz&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="3.9E-05" asserts="0" seed="14006968" />
            <test-case name="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{{prefix{{{bar}}}suffix}}&quot;,&quot;{{prefix{{{0}}}suffix}}&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{{prefix{{{bar}}}suffix}}&quot;,&quot;{{prefix{{{0}}}suffix}}&quot;)" methodname="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{{prefix{{{bar}}}suffix}}&quot;,&quot;{{prefix{{{0}}}suffix}}&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000632" asserts="0" seed="1438439509" />
            <test-case name="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{{prefix{{{foo}}}content{{{bar}}}suffix}}&quot;,&quot;{{prefix{{{0}}}content{{{1}}}suffix}}&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{{prefix{{{foo}}}content{{{bar}}}suffix}}&quot;,&quot;{{prefix{{{0}}}content{{{1}}}suffix}}&quot;)" methodname="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{{prefix{{{foo}}}content{{{bar}}}suffix}}&quot;,&quot;{{prefix{{{0}}}content{{{1}}}suffix}}&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="5.2E-05" asserts="0" seed="1248298098" />
            <test-case name="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;foo {bar} baz {foo} {bar} {baz}&quot;,&quot;foo {0} baz {1} {0} {2}&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;foo {bar} baz {foo} {bar} {baz}&quot;,&quot;foo {0} baz {1} {0} {2}&quot;)" methodname="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;foo {bar} baz {foo} {bar} {baz}&quot;,&quot;foo {0} baz {1} {0} {2}&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="4.8E-05" asserts="0" seed="149804470" />
            <test-case name="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{&quot;,&quot;{&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{&quot;,&quot;{&quot;)" methodname="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{&quot;,&quot;{&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="4.1E-05" asserts="0" seed="1160960865" />
            <test-case name="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;}&quot;,&quot;}&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;}&quot;,&quot;}&quot;)" methodname="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;}&quot;,&quot;}&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="3.49E-05" asserts="0" seed="1229681029" />
            <test-case name="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{foo} {bar&quot;,&quot;{0} {bar&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{foo} {bar&quot;,&quot;{0} {bar&quot;)" methodname="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{foo} {bar&quot;,&quot;{0} {bar&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="4.4E-05" asserts="0" seed="913339118" />
            <test-case name="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{{{{foo}}}}&quot;,&quot;{{{{foo}}}}&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{{{{foo}}}}&quot;,&quot;{{{{foo}}}}&quot;)" methodname="GetReportFormatShouldReturnTheCorrectFormattedTemplate(&quot;{{{{foo}}}}&quot;,&quot;{{{{foo}}}}&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="3.6E-05" asserts="0" seed="1945890163" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectNames(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" methodname="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002188" asserts="0" seed="1640835242" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;foo bar baz&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectNames(&quot;foo bar baz&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" methodname="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;foo bar baz&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0003379" asserts="0" seed="679578713" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;foo {{bar}} baz&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectNames(&quot;foo {{bar}} baz&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" methodname="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;foo {{bar}} baz&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="5.4E-05" asserts="0" seed="459806286" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{{prefix{{{bar}}}suffix}}&quot;,&quot;bar&quot;,&quot;&quot;,&quot;&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{{prefix{{{bar}}}suffix}}&quot;,&quot;bar&quot;,&quot;&quot;,&quot;&quot;)" methodname="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{{prefix{{{bar}}}suffix}}&quot;,&quot;bar&quot;,&quot;&quot;,&quot;&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000629" asserts="0" seed="920711232" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{{prefix{{{foo}}}content{{{bar}}}suffix}}&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{{prefix{{{foo}}}content{{{bar}}}suffix}}&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;&quot;)" methodname="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{{prefix{{{foo}}}content{{{bar}}}suffix}}&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000113" asserts="0" seed="579509834" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;foo {bar} baz {foo} {bar} {baz}&quot;,&quot;bar&quot;,&quot;foo&quot;,&quot;baz&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectNames(&quot;foo {bar} baz {foo} {bar} {baz}&quot;,&quot;bar&quot;,&quot;foo&quot;,&quot;baz&quot;)" methodname="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;foo {bar} baz {foo} {bar} {baz}&quot;,&quot;bar&quot;,&quot;foo&quot;,&quot;baz&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="6.1E-05" asserts="0" seed="1087898027" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" methodname="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="5.8E-05" asserts="0" seed="1438769276" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;}&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectNames(&quot;}&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" methodname="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;}&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="4.9E-05" asserts="0" seed="387846143" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{foo} {bar&quot;,&quot;foo&quot;,&quot;&quot;,&quot;&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{foo} {bar&quot;,&quot;foo&quot;,&quot;&quot;,&quot;&quot;)" methodname="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{foo} {bar&quot;,&quot;foo&quot;,&quot;&quot;,&quot;&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="5.7E-05" asserts="0" seed="2005826098" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{{{{foo}}}}&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{{{{foo}}}}&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" methodname="GetReportFormatShouldReturnTheCorrectObjectNames(&quot;{{{{foo}}}}&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="4.9E-05" asserts="0" seed="223982639" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectsWithTheCorrectNames(auto&lt;ReportFormatCreator&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectsWithTheCorrectNames(auto&lt;ReportFormatCreator&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;)" methodname="GetReportFormatShouldReturnTheCorrectObjectsWithTheCorrectNames(auto&lt;ReportFormatCreator&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001579" asserts="0" seed="1812211605" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectsWithTheCorrectNamesIfMorePlaceholdersThanValues(auto&lt;ReportFormatCreator&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectsWithTheCorrectNamesIfMorePlaceholdersThanValues(auto&lt;ReportFormatCreator&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;)" methodname="GetReportFormatShouldReturnTheCorrectObjectsWithTheCorrectNamesIfMorePlaceholdersThanValues(auto&lt;ReportFormatCreator&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002047" asserts="0" seed="44845799" />
            <test-case name="GetReportFormatShouldReturnTheCorrectObjectsWithTheCorrectNamesIfMoreValuesThanPlaceholders(auto&lt;ReportFormatCreator&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Reporting.ReportFormatCreatorTests.GetReportFormatShouldReturnTheCorrectObjectsWithTheCorrectNamesIfMoreValuesThanPlaceholders(auto&lt;ReportFormatCreator&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;)" methodname="GetReportFormatShouldReturnTheCorrectObjectsWithTheCorrectNamesIfMoreValuesThanPlaceholders(auto&lt;ReportFormatCreator&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;,auto&lt;Object&gt;)" classname="ReportFormatCreatorTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001505" asserts="0" seed="177928127" />
          </test-suite>
          <test-suite type="TestFixture" name="ToStringFormatterTests" fullname="CSF.Screenplay.Reporting.ToStringFormatterTests" classname="CSF.Screenplay.Reporting.ToStringFormatterTests" total="4" passed="4" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002169">
            <test-case name="CanFormatShouldReturnTrueForAPlainObject(auto&lt;ToStringFormatter&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Reporting.ToStringFormatterTests.CanFormatShouldReturnTrueForAPlainObject(auto&lt;ToStringFormatter&gt;,auto&lt;Object&gt;)" methodname="CanFormatShouldReturnTrueForAPlainObject(auto&lt;ToStringFormatter&gt;,auto&lt;Object&gt;)" classname="ToStringFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000227" asserts="0" seed="771007758" />
            <test-case name="CanFormatShouldReturnTrueForNull(auto&lt;ToStringFormatter&gt;)" fullname="CSF.Screenplay.Reporting.ToStringFormatterTests.CanFormatShouldReturnTrueForNull(auto&lt;ToStringFormatter&gt;)" methodname="CanFormatShouldReturnTrueForNull(auto&lt;ToStringFormatter&gt;)" classname="ToStringFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000141" asserts="0" seed="541504307" />
            <test-case name="FormatShouldReturnACorrectlyFormattedStringForAnObject(auto&lt;ToStringFormatter&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Reporting.ToStringFormatterTests.FormatShouldReturnACorrectlyFormattedStringForAnObject(auto&lt;ToStringFormatter&gt;,auto&lt;Object&gt;)" methodname="FormatShouldReturnACorrectlyFormattedStringForAnObject(auto&lt;ToStringFormatter&gt;,auto&lt;Object&gt;)" classname="ToStringFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000374" asserts="0" seed="2071100445" />
            <test-case name="FormatShouldReturnACorrectlyFormattedStringForNull(auto&lt;ToStringFormatter&gt;)" fullname="CSF.Screenplay.Reporting.ToStringFormatterTests.FormatShouldReturnACorrectlyFormattedStringForNull(auto&lt;ToStringFormatter&gt;)" methodname="FormatShouldReturnACorrectlyFormattedStringForNull(auto&lt;ToStringFormatter&gt;)" classname="ToStringFormatterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001427" asserts="0" seed="366945772" />
          </test-suite>
          <test-suite type="TestFixture" name="ValueFormatterProviderTests" fullname="CSF.Screenplay.Reporting.ValueFormatterProviderTests" classname="CSF.Screenplay.Reporting.ValueFormatterProviderTests" total="2" passed="2" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.008491">
            <test-case name="GetValueFormatterShouldReturnFirstFormatterWhichCanFormat(auto&lt;Formatter1&gt;,auto&lt;Formatter2&gt;,auto&lt;Formatter3&gt;,auto&lt;IServiceProvider&gt;,auto&lt;IFormatterRegistry&gt;,auto&lt;ValueFormatterProvider&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterProviderTests.GetValueFormatterShouldReturnFirstFormatterWhichCanFormat(auto&lt;Formatter1&gt;,auto&lt;Formatter2&gt;,auto&lt;Formatter3&gt;,auto&lt;IServiceProvider&gt;,auto&lt;IFormatterRegistry&gt;,auto&lt;ValueFormatterProvider&gt;,auto&lt;Object&gt;)" methodname="GetValueFormatterShouldReturnFirstFormatterWhichCanFormat(auto&lt;Formatter1&gt;,auto&lt;Formatter2&gt;,auto&lt;Formatter3&gt;,auto&lt;IServiceProvider&gt;,auto&lt;IFormatterRegistry&gt;,auto&lt;ValueFormatterProvider&gt;,auto&lt;Object&gt;)" classname="ValueFormatterProviderTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.007137" asserts="0" seed="1177445658" />
            <test-case name="GetValueFormatterShouldThrowIfNoFormattersCanFormat(auto&lt;Formatter1&gt;,auto&lt;IServiceProvider&gt;,auto&lt;IFormatterRegistry&gt;,auto&lt;ValueFormatterProvider&gt;,auto&lt;Object&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterProviderTests.GetValueFormatterShouldThrowIfNoFormattersCanFormat(auto&lt;Formatter1&gt;,auto&lt;IServiceProvider&gt;,auto&lt;IFormatterRegistry&gt;,auto&lt;ValueFormatterProvider&gt;,auto&lt;Object&gt;)" methodname="GetValueFormatterShouldThrowIfNoFormattersCanFormat(auto&lt;Formatter1&gt;,auto&lt;IServiceProvider&gt;,auto&lt;IFormatterRegistry&gt;,auto&lt;ValueFormatterProvider&gt;,auto&lt;Object&gt;)" classname="ValueFormatterProviderTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001354" asserts="0" seed="259478012" />
          </test-suite>
          <test-suite type="TestFixture" name="ValueFormatterRegistryTests" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests" classname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests" total="16" passed="16" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0103629">
            <test-case name="AddShouldAddAnItem(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.AddShouldAddAnItem(auto&lt;ValueFormatterRegistry&gt;)" methodname="AddShouldAddAnItem(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0003379" asserts="0" seed="405568370" />
            <test-case name="AddShouldThrowIfNull(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.AddShouldThrowIfNull(auto&lt;ValueFormatterRegistry&gt;)" methodname="AddShouldThrowIfNull(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000642" asserts="0" seed="2136803893" />
            <test-case name="ClearShouldEmptyTheCollection(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.ClearShouldEmptyTheCollection(auto&lt;ValueFormatterRegistry&gt;)" methodname="ClearShouldEmptyTheCollection(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000506" asserts="0" seed="1946671243" />
            <test-case name="ContainsShouldReturnTrueIfTheTypeIsContained(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.ContainsShouldReturnTrueIfTheTypeIsContained(auto&lt;ValueFormatterRegistry&gt;)" methodname="ContainsShouldReturnTrueIfTheTypeIsContained(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001981" asserts="0" seed="1679675846" />
            <test-case name="CopyToShouldCopyToAnArray(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.CopyToShouldCopyToAnArray(auto&lt;ValueFormatterRegistry&gt;)" methodname="CopyToShouldCopyToAnArray(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000381" asserts="0" seed="294870050" />
            <test-case name="CountSouldReturnCountFromWrapped(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.CountSouldReturnCountFromWrapped(auto&lt;ValueFormatterRegistry&gt;)" methodname="CountSouldReturnCountFromWrapped(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000386" asserts="0" seed="1970951505" />
            <test-case name="GetEnumeratorShouldNotReturnNull(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.GetEnumeratorShouldNotReturnNull(auto&lt;ValueFormatterRegistry&gt;)" methodname="GetEnumeratorShouldNotReturnNull(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000949" asserts="0" seed="1038566045" />
            <test-case name="IndexerGetShouldReturnExpectedValue(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.IndexerGetShouldReturnExpectedValue(auto&lt;ValueFormatterRegistry&gt;)" methodname="IndexerGetShouldReturnExpectedValue(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000539" asserts="0" seed="1361781774" />
            <test-case name="IndexerSetShouldReplaceAnItem(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.IndexerSetShouldReplaceAnItem(auto&lt;ValueFormatterRegistry&gt;)" methodname="IndexerSetShouldReplaceAnItem(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000563" asserts="0" seed="1657248242" />
            <test-case name="IndexerSetShouldThrowIfItIsAnInvalidType(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.IndexerSetShouldThrowIfItIsAnInvalidType(auto&lt;ValueFormatterRegistry&gt;)" methodname="IndexerSetShouldThrowIfItIsAnInvalidType(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000837" asserts="0" seed="1660882352" />
            <test-case name="IndexOfShouldReturnResultForItemThatIsContained(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.IndexOfShouldReturnResultForItemThatIsContained(auto&lt;ValueFormatterRegistry&gt;)" methodname="IndexOfShouldReturnResultForItemThatIsContained(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001332" asserts="0" seed="332600039" />
            <test-case name="InsertShouldBeAbleToAddToTheBeginningOfTheCollection(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.InsertShouldBeAbleToAddToTheBeginningOfTheCollection(auto&lt;ValueFormatterRegistry&gt;)" methodname="InsertShouldBeAbleToAddToTheBeginningOfTheCollection(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000541" asserts="0" seed="1696224666" />
            <test-case name="IsReadOnlyShouldReturnIsReadOnlyFromWrapped(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.IsReadOnlyShouldReturnIsReadOnlyFromWrapped(auto&lt;ValueFormatterRegistry&gt;)" methodname="IsReadOnlyShouldReturnIsReadOnlyFromWrapped(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000261" asserts="0" seed="816388309" />
            <test-case name="NonGenericGetEnumeratorShouldNotReturnNull(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.NonGenericGetEnumeratorShouldNotReturnNull(auto&lt;ValueFormatterRegistry&gt;)" methodname="NonGenericGetEnumeratorShouldNotReturnNull(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000524" asserts="0" seed="707901549" />
            <test-case name="RemoveAtShouldRemoveAnItem(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.RemoveAtShouldRemoveAnItem(auto&lt;ValueFormatterRegistry&gt;)" methodname="RemoveAtShouldRemoveAnItem(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000295" asserts="0" seed="2021727171" />
            <test-case name="RemoveShouldRemoveAnItem(auto&lt;ValueFormatterRegistry&gt;)" fullname="CSF.Screenplay.Reporting.ValueFormatterRegistryTests.RemoveShouldRemoveAnItem(auto&lt;ValueFormatterRegistry&gt;)" methodname="RemoveShouldRemoveAnItem(auto&lt;ValueFormatterRegistry&gt;)" classname="ValueFormatterRegistryTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000288" asserts="0" seed="273510518" />
          </test-suite>
          <test-suite type="TestFixture" name="WritePermissionTesterTests" fullname="CSF.Screenplay.Reporting.WritePermissionTesterTests" classname="CSF.Screenplay.Reporting.WritePermissionTesterTests" total="5" passed="5" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:52Z" duration="1.058709">
            <test-case name="HasWritePermissionShouldReturnFalseForAnEmptyString(auto&lt;WritePermissionTester&gt;)" fullname="CSF.Screenplay.Reporting.WritePermissionTesterTests.HasWritePermissionShouldReturnFalseForAnEmptyString(auto&lt;WritePermissionTester&gt;)" methodname="HasWritePermissionShouldReturnFalseForAnEmptyString(auto&lt;WritePermissionTester&gt;)" classname="WritePermissionTesterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000909" asserts="0" seed="1832156493" />
            <test-case name="HasWritePermissionShouldReturnFalseForANullString(auto&lt;WritePermissionTester&gt;)" fullname="CSF.Screenplay.Reporting.WritePermissionTesterTests.HasWritePermissionShouldReturnFalseForANullString(auto&lt;WritePermissionTester&gt;)" methodname="HasWritePermissionShouldReturnFalseForANullString(auto&lt;WritePermissionTester&gt;)" classname="WritePermissionTesterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000152" asserts="0" seed="898437262" />
            <test-case name="HasWritePermissionShouldReturnFalseForAWhitespaceOnlyString(auto&lt;WritePermissionTester&gt;)" fullname="CSF.Screenplay.Reporting.WritePermissionTesterTests.HasWritePermissionShouldReturnFalseForAWhitespaceOnlyString(auto&lt;WritePermissionTester&gt;)" methodname="HasWritePermissionShouldReturnFalseForAWhitespaceOnlyString(auto&lt;WritePermissionTester&gt;)" classname="WritePermissionTesterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000145" asserts="0" seed="974706077" />
            <test-case name="HasWritePermissionShouldReturnFalseForNonExistentNetworkShare(auto&lt;WritePermissionTester&gt;)" fullname="CSF.Screenplay.Reporting.WritePermissionTesterTests.HasWritePermissionShouldReturnFalseForNonExistentNetworkShare(auto&lt;WritePermissionTester&gt;)" methodname="HasWritePermissionShouldReturnFalseForNonExistentNetworkShare(auto&lt;WritePermissionTester&gt;)" classname="WritePermissionTesterTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:52Z" duration="1.056286" asserts="0" seed="1537167942" />
            <test-case name="HasWritePermissionShouldReturnTrueForARelativeFilenameInTheCurrentDirectory(auto&lt;WritePermissionTester&gt;)" fullname="CSF.Screenplay.Reporting.WritePermissionTesterTests.HasWritePermissionShouldReturnTrueForARelativeFilenameInTheCurrentDirectory(auto&lt;WritePermissionTester&gt;)" methodname="HasWritePermissionShouldReturnTrueForARelativeFilenameInTheCurrentDirectory(auto&lt;WritePermissionTester&gt;)" classname="WritePermissionTesterTests" result="Passed" start-time="2024-11-08T15:25:52Z" end-time="2024-11-08T15:25:52Z" duration="0.001217" asserts="0" seed="778124201" />
          </test-suite>
        </test-suite>
        <test-suite type="TestSuite" name="WebApis" fullname="CSF.Screenplay.WebApis" total="17" passed="17" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0838948">
          <test-suite type="TestFixture" name="HttpRequestMessageBuilderTests" fullname="CSF.Screenplay.WebApis.HttpRequestMessageBuilderTests" classname="CSF.Screenplay.WebApis.HttpRequestMessageBuilderTests" total="1" passed="1" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.007038">
            <test-case name="IntendedUsageAsImmutableRecordShouldProvideExpectedResults()" fullname="CSF.Screenplay.WebApis.HttpRequestMessageBuilderTests.IntendedUsageAsImmutableRecordShouldProvideExpectedResults()" methodname="IntendedUsageAsImmutableRecordShouldProvideExpectedResults()" classname="HttpRequestMessageBuilderTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.007038" asserts="0" seed="708570885" />
          </test-suite>
          <test-suite type="TestFixture" name="MakeWebApiRequestsTests" fullname="CSF.Screenplay.WebApis.MakeWebApiRequestsTests" classname="CSF.Screenplay.WebApis.MakeWebApiRequestsTests" total="3" passed="3" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002563">
            <test-case name="AddClientShouldAddADefaultClientWithAUriWhenUsedWithoutAClientName(auto&lt;Actor&gt;)" fullname="CSF.Screenplay.WebApis.MakeWebApiRequestsTests.AddClientShouldAddADefaultClientWithAUriWhenUsedWithoutAClientName(auto&lt;Actor&gt;)" methodname="AddClientShouldAddADefaultClientWithAUriWhenUsedWithoutAClientName(auto&lt;Actor&gt;)" classname="MakeWebApiRequestsTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001012" asserts="0" seed="1104472575" />
            <test-case name="AddClientShouldAddANamedClientWithAUriWhenUsedWithAClientName(auto&lt;Actor&gt;)" fullname="CSF.Screenplay.WebApis.MakeWebApiRequestsTests.AddClientShouldAddANamedClientWithAUriWhenUsedWithAClientName(auto&lt;Actor&gt;)" methodname="AddClientShouldAddANamedClientWithAUriWhenUsedWithAClientName(auto&lt;Actor&gt;)" classname="MakeWebApiRequestsTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000267" asserts="0" seed="1707860990" />
            <test-case name="DisposeShouldDisposeEachClient(auto&lt;Actor&gt;)" fullname="CSF.Screenplay.WebApis.MakeWebApiRequestsTests.DisposeShouldDisposeEachClient(auto&lt;Actor&gt;)" methodname="DisposeShouldDisposeEachClient(auto&lt;Actor&gt;)" classname="MakeWebApiRequestsTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001284" asserts="0" seed="1881239390" />
          </test-suite>
          <test-suite type="TestFixture" name="NameValueRecordCollectionTests" fullname="CSF.Screenplay.WebApis.NameValueRecordCollectionTests" classname="CSF.Screenplay.WebApis.NameValueRecordCollectionTests" total="4" passed="4" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.003357">
            <test-case name="GetFromIndexerShouldReturnExpectedResult()" fullname="CSF.Screenplay.WebApis.NameValueRecordCollectionTests.GetFromIndexerShouldReturnExpectedResult()" methodname="GetFromIndexerShouldReturnExpectedResult()" classname="NameValueRecordCollectionTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000391" asserts="0" seed="101282147" />
            <test-case name="GetFromNonexistentIndexerShouldReturnExpectedResult()" fullname="CSF.Screenplay.WebApis.NameValueRecordCollectionTests.GetFromNonexistentIndexerShouldReturnExpectedResult()" methodname="GetFromNonexistentIndexerShouldReturnExpectedResult()" classname="NameValueRecordCollectionTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.000207" asserts="0" seed="1398358008" />
            <test-case name="GetHashCodeShouldReturnTheSameValueIfUsedTwice()" fullname="CSF.Screenplay.WebApis.NameValueRecordCollectionTests.GetHashCodeShouldReturnTheSameValueIfUsedTwice()" methodname="GetHashCodeShouldReturnTheSameValueIfUsedTwice()" classname="NameValueRecordCollectionTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001393" asserts="0" seed="1336194495" />
            <test-case name="IntendedUsageAsImmutableRecordShouldProvideExpectedResults()" fullname="CSF.Screenplay.WebApis.NameValueRecordCollectionTests.IntendedUsageAsImmutableRecordShouldProvideExpectedResults()" methodname="IntendedUsageAsImmutableRecordShouldProvideExpectedResults()" classname="NameValueRecordCollectionTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.001366" asserts="0" seed="1927541109" />
          </test-suite>
          <test-suite type="TestFixture" name="SendTheHttpRequestAndGetJsonResponseTests" fullname="CSF.Screenplay.WebApis.SendTheHttpRequestAndGetJsonResponseTests" classname="CSF.Screenplay.WebApis.SendTheHttpRequestAndGetJsonResponseTests" total="1" passed="1" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0022169">
            <test-case name="GetReportFragmentShouldReturnTheCorrectString(auto&lt;IHasName&gt;,auto&lt;IFormatsReportFragment&gt;,auto&lt;HttpRequestMessageBuilder`1&gt;,auto&lt;SendTheHttpRequestAndGetJsonResponse`1&gt;,auto&lt;ReportFragment&gt;)" fullname="CSF.Screenplay.WebApis.SendTheHttpRequestAndGetJsonResponseTests.GetReportFragmentShouldReturnTheCorrectString(auto&lt;IHasName&gt;,auto&lt;IFormatsReportFragment&gt;,auto&lt;HttpRequestMessageBuilder`1&gt;,auto&lt;SendTheHttpRequestAndGetJsonResponse`1&gt;,auto&lt;ReportFragment&gt;)" methodname="GetReportFragmentShouldReturnTheCorrectString(auto&lt;IHasName&gt;,auto&lt;IFormatsReportFragment&gt;,auto&lt;HttpRequestMessageBuilder`1&gt;,auto&lt;SendTheHttpRequestAndGetJsonResponse`1&gt;,auto&lt;ReportFragment&gt;)" classname="SendTheHttpRequestAndGetJsonResponseTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0022169" asserts="0" seed="436819111" />
          </test-suite>
          <test-suite type="TestFixture" name="SendTheHttpRequestAndGetTheResponseTests" fullname="CSF.Screenplay.WebApis.SendTheHttpRequestAndGetTheResponseTests" classname="CSF.Screenplay.WebApis.SendTheHttpRequestAndGetTheResponseTests" total="1" passed="1" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002869">
            <test-case name="GetReportFragmentShouldReturnTheCorrectString(auto&lt;IHasName&gt;,auto&lt;IFormatsReportFragment&gt;,auto&lt;HttpRequestMessageBuilder`1&gt;,auto&lt;SendTheHttpRequestAndGetTheResponse`1&gt;,auto&lt;ReportFragment&gt;)" fullname="CSF.Screenplay.WebApis.SendTheHttpRequestAndGetTheResponseTests.GetReportFragmentShouldReturnTheCorrectString(auto&lt;IHasName&gt;,auto&lt;IFormatsReportFragment&gt;,auto&lt;HttpRequestMessageBuilder`1&gt;,auto&lt;SendTheHttpRequestAndGetTheResponse`1&gt;,auto&lt;ReportFragment&gt;)" methodname="GetReportFragmentShouldReturnTheCorrectString(auto&lt;IHasName&gt;,auto&lt;IFormatsReportFragment&gt;,auto&lt;HttpRequestMessageBuilder`1&gt;,auto&lt;SendTheHttpRequestAndGetTheResponse`1&gt;,auto&lt;ReportFragment&gt;)" classname="SendTheHttpRequestAndGetTheResponseTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002869" asserts="0" seed="506499522" />
          </test-suite>
          <test-suite type="TestFixture" name="SendTheHttpRequestTests" fullname="CSF.Screenplay.WebApis.SendTheHttpRequestTests" classname="CSF.Screenplay.WebApis.SendTheHttpRequestTests" total="1" passed="1" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002393">
            <test-case name="GetReportFragmentShouldReturnTheCorrectString(auto&lt;IHasName&gt;,auto&lt;IFormatsReportFragment&gt;,auto&lt;HttpRequestMessageBuilder&gt;,auto&lt;SendTheHttpRequest&gt;,auto&lt;ReportFragment&gt;)" fullname="CSF.Screenplay.WebApis.SendTheHttpRequestTests.GetReportFragmentShouldReturnTheCorrectString(auto&lt;IHasName&gt;,auto&lt;IFormatsReportFragment&gt;,auto&lt;HttpRequestMessageBuilder&gt;,auto&lt;SendTheHttpRequest&gt;,auto&lt;ReportFragment&gt;)" methodname="GetReportFragmentShouldReturnTheCorrectString(auto&lt;IHasName&gt;,auto&lt;IFormatsReportFragment&gt;,auto&lt;HttpRequestMessageBuilder&gt;,auto&lt;SendTheHttpRequest&gt;,auto&lt;ReportFragment&gt;)" classname="SendTheHttpRequestTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002393" asserts="0" seed="405119330" />
          </test-suite>
          <test-suite type="TestFixture" name="WebApiBuilderTests" fullname="CSF.Screenplay.WebApis.WebApiBuilderTests" classname="CSF.Screenplay.WebApis.WebApiBuilderTests" total="6" passed="6" failed="0" inconclusive="0" skipped="0" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0634579">
            <test-case name="GetTheJsonResultShouldGetAnActionWhichYieldsTheExpectedPayload(auto&lt;SerializableObject&gt;,auto&lt;Actor&gt;)" fullname="CSF.Screenplay.WebApis.WebApiBuilderTests.GetTheJsonResultShouldGetAnActionWhichYieldsTheExpectedPayload(auto&lt;SerializableObject&gt;,auto&lt;Actor&gt;)" methodname="GetTheJsonResultShouldGetAnActionWhichYieldsTheExpectedPayload(auto&lt;SerializableObject&gt;,auto&lt;Actor&gt;)" classname="WebApiBuilderTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.043436" asserts="0" seed="855618979" />
            <test-case name="GetTheJsonResultWithParametersShouldGetAnActionWhichYieldsTheExpectedPayload(auto&lt;SerializableObject&gt;,auto&lt;Actor&gt;,auto&lt;String&gt;)" fullname="CSF.Screenplay.WebApis.WebApiBuilderTests.GetTheJsonResultWithParametersShouldGetAnActionWhichYieldsTheExpectedPayload(auto&lt;SerializableObject&gt;,auto&lt;Actor&gt;,auto&lt;String&gt;)" methodname="GetTheJsonResultWithParametersShouldGetAnActionWhichYieldsTheExpectedPayload(auto&lt;SerializableObject&gt;,auto&lt;Actor&gt;,auto&lt;String&gt;)" classname="WebApiBuilderTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.003641" asserts="0" seed="1483077500" />
            <test-case name="SendTheHttpRequestShouldGetAnActionForAGenericEndpoint(auto&lt;Actor&gt;)" fullname="CSF.Screenplay.WebApis.WebApiBuilderTests.SendTheHttpRequestShouldGetAnActionForAGenericEndpoint(auto&lt;Actor&gt;)" methodname="SendTheHttpRequestShouldGetAnActionForAGenericEndpoint(auto&lt;Actor&gt;)" classname="WebApiBuilderTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.007066" asserts="0" seed="1387788810" />
            <test-case name="SendTheHttpRequestShouldGetAnActionForAGenericParameterizedEndpoint(auto&lt;Actor&gt;)" fullname="CSF.Screenplay.WebApis.WebApiBuilderTests.SendTheHttpRequestShouldGetAnActionForAGenericParameterizedEndpoint(auto&lt;Actor&gt;)" methodname="SendTheHttpRequestShouldGetAnActionForAGenericParameterizedEndpoint(auto&lt;Actor&gt;)" classname="WebApiBuilderTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.003611" asserts="0" seed="997196164" />
            <test-case name="SendTheHttpRequestShouldGetAnActionForAnEndpoint(auto&lt;Actor&gt;)" fullname="CSF.Screenplay.WebApis.WebApiBuilderTests.SendTheHttpRequestShouldGetAnActionForAnEndpoint(auto&lt;Actor&gt;)" methodname="SendTheHttpRequestShouldGetAnActionForAnEndpoint(auto&lt;Actor&gt;)" classname="WebApiBuilderTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.002768" asserts="0" seed="957609162" />
            <test-case name="SendTheHttpRequestShouldGetAnActionForAParameterizedEndpoint(auto&lt;Actor&gt;)" fullname="CSF.Screenplay.WebApis.WebApiBuilderTests.SendTheHttpRequestShouldGetAnActionForAParameterizedEndpoint(auto&lt;Actor&gt;)" methodname="SendTheHttpRequestShouldGetAnActionForAParameterizedEndpoint(auto&lt;Actor&gt;)" classname="WebApiBuilderTests" result="Passed" start-time="2024-11-08T15:25:51Z" end-time="2024-11-08T15:25:51Z" duration="0.0029359" asserts="0" seed="2123656674" />
          </test-suite>
        </test-suite>
      </test-suite>
    </test-suite>
    <errors />
  </test-suite>
</test-run>
